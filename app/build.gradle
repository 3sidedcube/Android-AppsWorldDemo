apply plugin: 'com.android.application'

android {
	compileSdkVersion 21
	buildToolsVersion "21.1"

	defaultConfig {
		applicationId "co.stormcorp.awdemo"
		minSdkVersion 15
		targetSdkVersion 21
		versionCode 1
		versionName "1.0"
	}

	packagingOptions {
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/license.txt'
		exclude 'META-INF/dependencies.txt'
		exclude 'META-INF/LGPL2.1'
		exclude 'LICENSE.txt'
	}

	productFlavors {
		demo {
			applicationId "co.stormcorp.awdemo" + (project.hasProperty('appname') ? "." + generatePackage(appname) : '')
		}
	}
}

dependencies {
	compile project(':Libraries:LightningContent')
	compile project(':Libraries:LightningLanguage')
	compile project(':Libraries:LightningMessage')
	compile project(':Libraries:LightningUi')
}

def generatePackage(String name)
{
	name = name.toLowerCase().replaceAll("[^a-z]", "");
	return name;
}

task getBundle(type: Exec) {
	if (project.hasProperty("appid"))
	{
		ArrayList<String> args = new ArrayList<String>();
		args.add(String.valueOf(appid))

		setArgs(args)
		executable('./get-bundle.py')
	}
}

task setName() {
	if (project.hasProperty("appname"))
	{
		def valueWriter = file("src/main/res/values/strings.xml")
		valueWriter.write(
			"<resources>\n" +
			"    <string name=\"app_name\">" + appname.replaceAll("[^a-zA-Z0-9\\s_-]", "") + "</string>\n" +
			"</resources>"
		)
	}
}

tasks.whenTaskAdded { task ->
	if (project.getGradle().startParameter.taskNames.size() > 0)
	{
		def taskName = project.getGradle().startParameter.taskNames.get(0);

		if (taskName.contains("Release"))
		{
			task.dependsOn setName
			task.dependsOn getBundle
		}
	}
}
